# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from playground_application.models.base_model_ import Model
from playground_application import util


class LoadedCsv(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rows=None):  # noqa: E501
        """LoadedCsv - a model defined in OpenAPI

        :param rows: The rows of this LoadedCsv.  # noqa: E501
        :type rows: Dict[str, List[float]]
        """
        self.openapi_types = {
            'rows': Dict[str, List[float]]
        }

        self.attribute_map = {
            'rows': 'rows'
        }

        self._rows = rows

    @classmethod
    def from_dict(cls, dikt) -> 'LoadedCsv':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LoadedCsv of this LoadedCsv.  # noqa: E501
        :rtype: LoadedCsv
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rows(self):
        """Gets the rows of this LoadedCsv.


        :return: The rows of this LoadedCsv.
        :rtype: Dict[str, List[float]]
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this LoadedCsv.


        :param rows: The rows of this LoadedCsv.
        :type rows: Dict[str, List[float]]
        """
        if rows is None:
            raise ValueError("Invalid value for `rows`, must not be `None`")  # noqa: E501

        self._rows = rows
